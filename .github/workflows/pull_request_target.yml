# ------------------------------------------------------------- #
# Note: this file is automatically managed in template-template #
# ------------------------------------------------------------- #

on: pull_request_target

name: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  metadata:
    runs-on: ubuntu-latest

    outputs:
      repository_is_template: ${{ steps.metadata.outputs.repository_is_template }}
      repository_default_branch: ${{ steps.metadata.outputs.repository_default_branch }}

    steps:
      - uses: actions/checkout@v3.0.2

      - uses: ahmadnassri/action-metadata@v2.1.1
        id: metadata

  auto-merge:
    timeout-minutes: 5

    runs-on: ubuntu-latest

    # only run for dependabot PRs
    if: ${{ github.actor == 'dependabot[bot]' }}

    env:
      PR_URL: ${{github.event.pull_request.html_url}}
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:
      - id: dependabot
        uses: dependabot/fetch-metadata@v1.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: auto merge conditions
        id: auto-merge
        if: |
          (
            steps.dependabot.outputs.update-type == 'version-update:semver-patch' &&
            contains('direct:production,indirect:production', steps.dependabot.outputs.dependency-type)
          ) || (
            steps.dependabot.outputs.update-type == 'version-update:semver-minor' &&
            contains('direct:development,indirect:development', steps.dependabot.outputs.dependency-type)
          )
        run: echo "::notice ::auto-merge conditions satisfied"

      - name: auto approve pr
        if: ${{ steps.auto-merge.conclusion == 'success' }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --auto --rebase "$PR_URL"

  terraform-plan:
    needs:
      - metadata

    # only runs on non main branch for non template repos
    if: |
      needs.metadata.outputs.repository_is_template == 'false' &&
      needs.metadata.outputs.repository_default_branch != github.ref_name

    timeout-minutes: 30

    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - uses: actions/checkout@v3.0.2

      - uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - uses: actions/cache@v2.1.4
        with:
          key: terraform-cache-${{ hashFiles('.terraform.lock.hcl') }}
          path: .terraform

      - run: terraform init
      - run: terraform validate
      - run: terraform fmt -check
      - run: terraform fmt -check module
      - run: terraform plan -lock=false -out terraform.plan
        env:
          TF_VAR_TF_TOKEN: ${{ secrets.TF_TOKEN }}
          TF_VAR_GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TF_VAR_NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          TF_VAR_DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          TF_VAR_SECRET_ROTATION: ${{ secrets.SECRET_ROTATION }}

      # generate plain output
      - run: terraform show -no-color terraform.plan > terraform.text

      # generate json output
      - run: terraform show -json terraform.plan > terraform.json

      - uses: ahmadnassri/action-terraform-report@v2
        with:
          # tell the action the plan outputs
          terraform-text: ${{ github.workspace }}/terraform.text
          terraform-json: ${{ github.workspace }}/terraform.json

  template-sync:
    needs: metadata

    timeout-minutes: 20

    runs-on: ubuntu-latest

    # only run for templates
    if: ${{ needs.metadata.outputs.repository_is_template == 'true' }}

    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: ahmadnassri/action-workflow-queue@v1.1
      - uses: ahmadnassri/action-template-repository-sync@v2
        with:
          github-token: ${{ secrets.GH_TOKEN }}
